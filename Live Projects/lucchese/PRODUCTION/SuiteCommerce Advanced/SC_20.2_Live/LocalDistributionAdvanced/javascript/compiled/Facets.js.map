{"version":3,"sources":["Facets.ts"],"names":[],"mappings":"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","file":"Facets.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Facets\"/>\n\nimport * as _ from 'underscore';\nimport 'facets_item_cell_grid.tpl';\nimport 'facets_item_cell_table.tpl';\nimport 'facets_item_cell_list.tpl';\nimport 'facets_faceted_navigation_item.tpl';\nimport 'facets_faceted_navigation_item_color.tpl';\nimport 'facets_faceted_navigation_item_range.tpl';\nimport * as Utils from '../../Utilities/JavaScript/Utils';\n\nimport { Configuration } from '../../Utilities/JavaScript/Configuration';\n\nimport Translator = require('./Facets.Translator');\nimport Model = require('./Facets.Model');\nimport Router = require('./Facets.Router');\nimport { ProductListPageComponent } from './ProductListPage.Component';\n\nimport Categories = require('../../../Commons/Categories/JavaScript/Categories');\n\n// @module Facets AKA Item List.\n\nfunction prepareRouter(application, router) {\n    // we are constructing this regexp like:\n    // /^\\b(toplevelcategory1|toplevelcategory2|facetname1|facetname2|defaulturl)\\b\\/(.*?)$/\n    // and adding it as a route\n\n    const facets_to_include = new Translator().getFacetsToInclude();\n\n    // Here we generate an array with:\n    // * The default url\n    // * The Names of the facets that are in the siteSettings.facetfield config\n    // * And the url of the top level categories\n    const components = _.compact(\n        _.union([application.translatorConfig.fallbackUrl], facets_to_include || [])\n    );\n\n    router.addUrl(components, 'facetLoading');\n\n    const categories_promise = Categories.getCategoriesPromise();\n\n    categories_promise.then(() => {\n        const categoriesTopLevelUrl = Categories.getTopLevelCategoriesUrlComponent();\n        router.addUrl(categoriesTopLevelUrl, 'categoryLoading');\n    });\n}\n\nfunction setTranslatorConfig(application) {\n    const {\n        defaultSearchUrl,\n        resultsPerPage,\n        sortOptions,\n        itemsDisplayOptions,\n        facets,\n        facetsAsUrlParameters,\n        facetDelimiters,\n        facetsSeoLimits\n    } = application.getConfig();\n\n    // Formats a configuration object in the way the translator is expecting it\n    application.translatorConfig = {\n        fallbackUrl: defaultSearchUrl,\n        defaultShow: _.result(\n            _.find(resultsPerPage, function(show) {\n                return show.isDefault;\n            }) || resultsPerPage[0],\n            'items'\n        ),\n        defaultOrder: _.result(\n            _.find(sortOptions, function(sort) {\n                return sort.isDefault;\n            }) || sortOptions[0],\n            'id'\n        ),\n        defaultDisplay: _.result(\n            _.find(itemsDisplayOptions, function(display) {\n                return display.isDefault;\n            }) || itemsDisplayOptions[0],\n            'id'\n        ),\n        facets: facets,\n        facetsAsUrlParameters: facetsAsUrlParameters,\n        facetDelimiters: facetDelimiters,\n        facetsSeoLimits: facetsSeoLimits\n    };\n}\n\nfunction prepareItemDisplayOptions() {\n    /* ---------------------------\n\titemsDisplayOptions is set when the user loads the page with the current width of the screen device, NOT the width of the browser.\n\tThis option is NOT responsive, so if the user loads the page with the desktop resolution, even if he resize the browser, he will still see the view of the desktop.\n\n\tDisplay type and columns supported by screen resolution:\n\n\tMobile\n\tDisplay types -> List, Table\n\t\tList -> columns  [1, 2]\n\t\tTable -> columns [1, 2]\n\n\tTablet\n\tDisplay types  -> List, Table\n\t\tList -> columns [1, 2, 3, 4, 6, 12]\n\t\tTable -> columns [1, 2, 3, 4, 6, 12]\n\n\tDesktop\n\tDisplay types\t->\n\t\tList -> columns [1, 2, 3, 4, 6, 12]\n\t\tTable -> columns [1, 2, 3, 4, 6, 12]\n\t\tGrid -> columns [1, 2, 3, 4, 6, 12]\n\t--------------------------*/\n\n    if (!Utils.isPageGenerator()) {\n        const screenType = Utils.getDeviceType();\n\n        // Phone Specific\n        if (screenType === 'phone') {\n            _.extend(Configuration.itemsDisplayOptions, Configuration.itemsDisplayOptionsPhone);\n            _.extend(Configuration.sortOptions, Configuration.sortOptionsPhone);\n            _.extend(\n                Configuration.defaultPaginationSettings,\n                Configuration.defaultPaginationSettingsPhone\n            );\n        }\n        // Tablet Specific\n        else if (screenType === 'tablet') {\n            _.extend(Configuration.itemsDisplayOptions, Configuration.itemsDisplayOptionsTablet);\n            _.extend(Configuration.sortOptions, Configuration.sortOptionsTablet);\n            _.extend(\n                Configuration.defaultPaginationSettings,\n                Configuration.defaultPaginationSettingsTablet\n            );\n        }\n    }\n}\n\nexport = {\n    // @property {Class<FacetsTranslator>} Translator the facets translator class\n    Translator: Translator,\n\n    Model: Model,\n\n    Router: Router,\n\n    setTranslatorConfig: setTranslatorConfig,\n\n    // @method prepareRouter\n    prepareRouter: prepareRouter,\n\n    // @property {Object} facetConfigParsers configuration facet parsers available in the configuration: facets->parser properties. Third party modules could add new here.\n    facetConfigParsers: {\n        currency: function(value) {\n            return Utils.formatCurrency(value);\n        },\n        quantity: function(value) {\n            return Utils.formatQuantity(value);\n        },\n        default: function(value) {\n            return value;\n        }\n    },\n\n    mountToApp: function(application) {\n        // Post-process the configuration\n        prepareItemDisplayOptions();\n\n        let facets = application.getConfig().facets || [];\n\n        facets = _.sortBy(facets, function(facet1: any, facet2: any) {\n            return facet1.priority > facet2.priority ? 0 : 1;\n        });\n\n        _.each(facets, function(facet: any) {\n            facet.colors = application.getLayout().getColorPalette(facet.colors);\n        });\n\n        setTranslatorConfig(application);\n\n        const routerInstance = new Router(application);\n\n        prepareRouter(application, routerInstance);\n\n        // set up facet configuration parsers\n        const self = this;\n\n        _.each(facets, function(facet: any) {\n            if (facet.parser) {\n                facet.parser = self.facetConfigParsers[facet.parser];\n            }\n\n            if (!facet.parser) {\n                facet.parser = self.facetConfigParsers.default;\n            }\n        });\n\n        return ProductListPageComponent(application);\n    }\n};\n"]}