{"version":3,"sources":["Merchandising.ts"],"names":[],"mappings":"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","file":"Merchandising.js","sourcesContent":["/*\n\tÂ© 2020 NetSuite Inc.\n\tUser may not copy, modify, distribute, or re-bundle or otherwise make available this code;\n\tprovided, however, if you are an authorized user with a NetSuite account or log-in, you\n\tmay use this code subject to the terms that govern your access and use.\n*/\n\n/// <amd-module name=\"Merchandising\">\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\nimport './Merchandising.jQueryPlugin';\nimport * as _ from 'underscore';\n\nimport MerchandisingItemCollection = require('./Merchandising.Item.Collection');\nimport Rule = require('./Merchandising.Rule');\n\n// @module Merchandising\n// Module to handle MerchandisingZones (ex: Featured Items section)\n\nexport = {\n    reRenderMerchandizing: function reRenderMerchandizing(application, view) {\n        view.$('[data-type=\"merchandising-zone\"]').merchandisingZone({\n            application: application\n        });\n    },\n\n    // @class Merchandising It will listen onAfterAppendView to see if there is a new placeholder on\n    // which to attach a merchandising @extends ApplicationModule\n    mountToApp: function(application) {\n        if (SC.ENVIRONMENT.MERCHANDISING) {\n            // we need to turn it into an array\n            const definitions = _.map(SC.ENVIRONMENT.MERCHANDISING, function(value: any, key) {\n                value.internalid = key;\n                return value;\n            });\n\n            Rule.Collection.getInstance().reset(definitions);\n            delete SC.ENVIRONMENT.MERCHANDISING;\n        }\n\n        // we add the default options to be added when fetching the items\n        // this includes language and shoper's currency\n        const searchApiMasterOptions = application.getConfig().searchApiMasterOptions || {};\n        MerchandisingItemCollection.prototype.searchApiMasterOptions =\n            searchApiMasterOptions.merchandisingZone;\n\n        let current_selected_view;\n        const self = this;\n\n        // afterAppendView is triggered whenever a view or modal is appended\n        application\n            .getLayout()\n            .on('afterAppendView', function(view) {\n                if (!current_selected_view) {\n                    current_selected_view = view;\n                } else {\n                    current_selected_view.off('afterViewRender', self.reRenderMerchandizing);\n                    current_selected_view.off(\n                        'afterCompositeViewRender',\n                        self.reRenderMerchandizing\n                    );\n                    current_selected_view = view;\n                }\n\n                current_selected_view.on(\n                    view.childViews ? 'afterCompositeViewRender' : 'afterViewRender',\n                    _.bind(self.reRenderMerchandizing, self, application)\n                );\n\n                self.reRenderMerchandizing(application, current_selected_view);\n            })\n            // content service triggers this event when rendering a new enhanced page\n            .on('renderEnhancedPageContent', function(view, content_zone) {\n                // if the type of the content zone is merchandising\n                if (content_zone.contenttype === 'merchandising') {\n                    const { target } = content_zone;\n                    const $view_target = view.$(target);\n                    const merchandising_zone_options = {\n                        application: application,\n                        id: content_zone.content\n                    };\n\n                    // if the target is in the current view\n                    // we add the merchandising zone there\n                    if ($view_target.length) {\n                        $view_target.merchandisingZone(merchandising_zone_options);\n                    } else {\n                        // else, we search for the target in the layout\n                        this.$(target)\n                            .filter(':empty')\n                            .merchandisingZone(merchandising_zone_options);\n                    }\n                }\n            });\n\n        // @module ApplicationSkeleton @class ApplicationSkeleton @method getMerchandisingRules @return {MerchandisingRule.Collection}\n        application.getMerchandisingRules = function getMerchandisingRules() {\n            return Rule.Collection.getInstance();\n        };\n    }\n};\n"]}